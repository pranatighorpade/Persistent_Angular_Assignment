{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-a72e9bf275271809e190d2ff88e650c2",
            "file": "src/app/store/app.states.ts",
            "type": "interface",
            "sourceCode": "import * as auth from './reducers/auth.reducers';\r\nimport { createFeatureSelector } from '@ngrx/store';\r\nimport * as product from '../products/store/reducers/product.reducer';\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  product: product.State;\r\n}\r\n\r\nexport const reducers = {\r\n  auth: auth.reducer,\r\n  product: product.productReducer,\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const selectProductState = createFeatureSelector<AppState>('product');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "product",
                    "type": "product.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-607ebf5872c1afe24540a58feaf1b72f",
            "file": "src/app/store/reducers/auth.reducers.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../models/user';\r\nimport { AuthActionTypes, All } from '../actions/auth.actions';\r\nexport interface State {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  errorMessage: string | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n};\r\n\r\nexport function reducer(state = initialState, action: All): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          email: action.payload.email,\r\n          password: action.payload.password,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Incorrect email or password.',\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: {\r\n          email: action.payload.email,\r\n          password: action.payload.password,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-a5a195318bb670a3687bb9d9c61f9cf5-1",
            "file": "src/app/products/store/reducers/product.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Product } from '../../models/product';\r\nimport {\r\n  LIST_PRODUCTS,\r\n  LIST_DATA_SUCCESS,\r\n  ProductsActions,\r\n  ADD_PRODUCT,\r\n  DELETE_PRODUCT,\r\n  UPDATE_PRODUCT,\r\n  ADD_PRODUCT_SUCCESS,\r\n  DELETE_PRODUCT_SUCCESS,\r\n  UPDATE_PRODUCT_SUCCESS,\r\n} from '../actions/product.action';\r\n\r\nexport interface State {\r\n  products: Product[];\r\n  added: boolean | null;\r\n  updated: boolean | null;\r\n  deleted: boolean | null;\r\n  loaded: boolean | null;\r\n  message: string | null;\r\n}\r\n\r\nconst initialState: State = {\r\n  products: [],\r\n  message: null,\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null,\r\n};\r\n\r\nexport function productReducer(\r\n  state: State = initialState,\r\n  action: ProductsActions\r\n): State {\r\n  switch (action.type) {\r\n    case ADD_PRODUCT: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case LIST_PRODUCTS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case DELETE_PRODUCT: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPDATE_PRODUCT: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case LIST_DATA_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        products: action.payload,\r\n        message: null,\r\n        loaded: true,\r\n      };\r\n    }\r\n    case ADD_PRODUCT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case DELETE_PRODUCT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPDATE_PRODUCT_SUCCESS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "added",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "deleted",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "loaded",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "message",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "products",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "updated",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-f3f89aeb05210e5d46e1921992ac248e",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "createEffect(() =>\r\n    this.actions\r\n      .pipe(ofType(AuthActionTypes.LOGIN))\r\n      .pipe(map((action: LogIn) => action.payload))\r\n      .pipe(\r\n        switchMap((payload) => {\r\n          return this.authService\r\n            .logIn(payload)\r\n            .pipe(\r\n              map((user) => {\r\n                if (user.length > 0) {\r\n                  return new LogInSuccess({ email: payload.email });\r\n                } else {\r\n                  return new LogInFailure({ error: 'Sign in first' });\r\n                }\r\n              })\r\n            )\r\n            .pipe(\r\n              catchError((error) => {\r\n                return of(new LogInFailure({ error }));\r\n              })\r\n            );\r\n        })\r\n      )\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n          localStorage.setItem('user', JSON.stringify(user));\r\n          this.router.navigateByUrl('/product');\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "LogOut",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n          localStorage.removeItem('token');\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "createEffect(() =>\r\n    this.actions\r\n      .pipe(ofType(AuthActionTypes.SIGNUP))\r\n      .pipe(map((action: SignUp) => action.payload))\r\n      .pipe(\r\n        switchMap((payload) => {\r\n          return this.authService\r\n            .signUp(payload.email, payload.password)\r\n            .pipe(\r\n              map((user) => {\r\n                return new SignUpSuccess({\r\n                  email: payload.email,\r\n                  password: payload.password,\r\n                });\r\n              })\r\n            )\r\n            .pipe(\r\n              catchError((error) => {\r\n                return of(new SignUpFailure({ error }));\r\n              })\r\n            );\r\n        })\r\n      )\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "createEffect(\r\n    () => this.actions.pipe(ofType(AuthActionTypes.SIGNUP_FAILURE)),\r\n    { dispatch: false }\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n          localStorage.setItem('token', user);\r\n          this.router.navigateByUrl('/login');\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Action } from '@ngrx/store';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport {\r\n  AuthActionTypes,\r\n  LogIn,\r\n  LogInSuccess,\r\n  LogInFailure,\r\n  SignUp,\r\n  SignUpSuccess,\r\n  SignUpFailure,\r\n  LogOut,\r\n} from '../actions/auth.actions';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  constructor(\r\n    private actions: Actions,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  LogIn: Observable<any> = createEffect(() =>\r\n    this.actions\r\n      .pipe(ofType(AuthActionTypes.LOGIN))\r\n      .pipe(map((action: LogIn) => action.payload))\r\n      .pipe(\r\n        switchMap((payload) => {\r\n          return this.authService\r\n            .logIn(payload)\r\n            .pipe(\r\n              map((user) => {\r\n                if (user.length > 0) {\r\n                  return new LogInSuccess({ email: payload.email });\r\n                } else {\r\n                  return new LogInFailure({ error: 'Sign in first' });\r\n                }\r\n              })\r\n            )\r\n            .pipe(\r\n              catchError((error) => {\r\n                return of(new LogInFailure({ error }));\r\n              })\r\n            );\r\n        })\r\n      )\r\n  );\r\n\r\n  LogInSuccess: Observable<any> = createEffect(\r\n    () =>\r\n      this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n        tap((user) => {\r\n          localStorage.setItem('user', JSON.stringify(user));\r\n          this.router.navigateByUrl('/product');\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  SignUp: Observable<any> = createEffect(() =>\r\n    this.actions\r\n      .pipe(ofType(AuthActionTypes.SIGNUP))\r\n      .pipe(map((action: SignUp) => action.payload))\r\n      .pipe(\r\n        switchMap((payload) => {\r\n          return this.authService\r\n            .signUp(payload.email, payload.password)\r\n            .pipe(\r\n              map((user) => {\r\n                return new SignUpSuccess({\r\n                  email: payload.email,\r\n                  password: payload.password,\r\n                });\r\n              })\r\n            )\r\n            .pipe(\r\n              catchError((error) => {\r\n                return of(new SignUpFailure({ error }));\r\n              })\r\n            );\r\n        })\r\n      )\r\n  );\r\n\r\n  SignUpSuccess: Observable<any> = createEffect(\r\n    () =>\r\n      this.actions.pipe(\r\n        ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n        tap((user) => {\r\n          localStorage.setItem('token', user);\r\n          this.router.navigateByUrl('/login');\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  SignUpFailure: Observable<any> = createEffect(\r\n    () => this.actions.pipe(ofType(AuthActionTypes.SIGNUP_FAILURE)),\r\n    { dispatch: false }\r\n  );\r\n\r\n  public LogOut: Observable<any> = createEffect(\r\n    () =>\r\n      this.actions.pipe(\r\n        ofType(AuthActionTypes.LOGOUT),\r\n        tap((user) => {\r\n          localStorage.removeItem('token');\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-52daf97e9ea003a4062da6e2ebe75bd8",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "BASE_URL",
                    "defaultValue": "environment.baseURL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logIn",
                    "args": [
                        {
                            "name": "payload",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject, Observable, throwError } from 'rxjs';\nimport { User } from '../models/user';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  readonly BASE_URL = environment.baseURL;\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  constructor(private http: HttpClient) {}\n\n  logIn(payload: any): Observable<any> {\n    const url = encodeURI(\n      'username?email=' + payload.email + '&password=' + payload.password\n    );\n    return this.http\n      .get<User>(this.BASE_URL + url, this.httpOptions)\n      .pipe(catchError(this.errorHandler));\n  }\n\n  signUp(email: string, password: string): Observable<any> {\n    const url = `${this.BASE_URL}username`;\n    return this.http\n      .post<User>(url, { email, password }, this.httpOptions)\n      .pipe(catchError(this.errorHandler));\n  }\n\n  errorHandler(error): Observable<never> {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-b94fd5acc9f2023050d868c2f9328eaf",
            "file": "src/app/products/store/effects/product.effects.ts",
            "properties": [
                {
                    "name": "AddProduct",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(ADD_PRODUCT),\r\n    map((action: AddProduct) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productService.createProduct(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new AddProductSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "DeleteProduct",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(DELETE_PRODUCT),\r\n    map((action: DeleteProduct) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productService.deleteProduct(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new DeleteProductSuccess();\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "ListProducts",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(LIST_PRODUCTS),\r\n    map((action: ListProducts) => action),\r\n    mergeMap((payload) => {\r\n      return this.productService\r\n        .getAllProducts()\r\n        .pipe(map((data) => new ListDataSucess(data)));\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateProduct",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(UPDATE_PRODUCT),\r\n    map((action: UpdateProduct) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productService\r\n        .updateProduct(payload.index, payload.newProduct)\r\n        .pipe(\r\n          map((data) => {\r\n            if (data) {\r\n              return new UpdateProductSuccess(data);\r\n            }\r\n          })\r\n        );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { switchMap, map, mergeMap } from 'rxjs/operators';\r\n\r\nimport {\r\n  ListDataSucess,\r\n  LIST_PRODUCTS,\r\n  ListProducts,\r\n  AddProduct,\r\n  AddProductSuccess,\r\n  DeleteProduct,\r\n  DeleteProductSuccess,\r\n  UpdateProduct,\r\n  DELETE_PRODUCT,\r\n  UPDATE_PRODUCT,\r\n  ADD_PRODUCT,\r\n  UpdateProductSuccess,\r\n} from '../actions/product.action';\r\nimport { Product } from '../../models/product';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { ProductService } from '../../services/product.service';\r\n@Injectable()\r\nexport class ProductEffects {\r\n  constructor(\r\n    private actions: Actions,\r\n    private productService: ProductService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  @Effect({ dispatch: true })\r\n  ListProducts: Observable<any> = this.actions.pipe(\r\n    ofType(LIST_PRODUCTS),\r\n    map((action: ListProducts) => action),\r\n    mergeMap((payload) => {\r\n      return this.productService\r\n        .getAllProducts()\r\n        .pipe(map((data) => new ListDataSucess(data)));\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  AddProduct: Observable<any> = this.actions.pipe(\r\n    ofType(ADD_PRODUCT),\r\n    map((action: AddProduct) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productService.createProduct(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new AddProductSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  DeleteProduct: Observable<any> = this.actions.pipe(\r\n    ofType(DELETE_PRODUCT),\r\n    map((action: DeleteProduct) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productService.deleteProduct(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new DeleteProductSuccess();\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  UpdateProduct: Observable<any> = this.actions.pipe(\r\n    ofType(UPDATE_PRODUCT),\r\n    map((action: UpdateProduct) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.productService\r\n        .updateProduct(payload.index, payload.newProduct)\r\n        .pipe(\r\n          map((data) => {\r\n            if (data) {\r\n              return new UpdateProductSuccess(data);\r\n            }\r\n          })\r\n        );\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-31b0d825de86ea3a2a3f10153977e191",
            "file": "src/app/products/services/product.service.ts",
            "properties": [
                {
                    "name": "httpOptions",
                    "defaultValue": "{\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "jsonApiServer",
                    "defaultValue": "environment.baseURL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        },
                        {
                            "name": "product",
                            "type": "Product"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "Product",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Product } from '../models/product';\nimport { catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  readonly jsonApiServer = environment.baseURL;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n    }),\n  };\n\n  constructor(private httpClient: HttpClient) {}\n\n  createProduct(product: Product): Observable<Product> {\n    return this.httpClient\n      .post<Product>(\n        this.jsonApiServer + 'products/',\n        JSON.stringify(product),\n        this.httpOptions\n      )\n      .pipe(catchError(this.errorHandler));\n  }\n\n  getById(id: number): Observable<Product> {\n    return this.httpClient\n      .get<Product>(this.jsonApiServer + 'products/' + id)\n      .pipe(catchError(this.errorHandler));\n  }\n\n  getAllProducts(): Observable<Product[]> {\n    return this.httpClient\n      .get<Product[]>(this.jsonApiServer + 'products/')\n      .pipe(catchError(this.errorHandler));\n  }\n\n  updateProduct(id: number, product: Product): Observable<Product> {\n    return this.httpClient\n      .put<Product>(\n        this.jsonApiServer + 'products/' + id,\n        JSON.stringify(product),\n        this.httpOptions\n      )\n      .pipe(catchError(this.errorHandler));\n  }\n\n  deleteProduct(id: number): Observable<Product> {\n    return this.httpClient\n      .delete<Product>(this.jsonApiServer + 'products/' + id, this.httpOptions)\n      .pipe(catchError(this.errorHandler));\n  }\n\n  errorHandler(error): Observable<never> {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    window.alert(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-c76f8f0bae6e3a043d081aa47810a7cd",
            "file": "src/app/theme/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { darkTheme } from '../theme/dark-theme';\nimport { lightTheme } from '../theme/light-theme';\n\n@Injectable({ providedIn: 'root' })\nexport class ThemeService {\n  toggleDark(): void {\n    this.setTheme(darkTheme);\n  }\n\n  toggleLight(): void {\n    this.setTheme(lightTheme);\n  }\n\n  public setTheme(theme: {}): void {\n    Object.keys(theme).forEach((k) =>\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\n    );\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AddProduct",
            "id": "class-AddProduct-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddProductSuccess",
            "id": "class-AddProductSuccess-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteProduct",
            "id": "class-DeleteProduct-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteProductSuccess",
            "id": "class-DeleteProductSuccess-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListDataSucess",
            "id": "class-ListDataSucess-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product[]"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product[]",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "LIST_DATA_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ListProducts",
            "id": "class-ListProducts-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "LIST_PRODUCTS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogOut",
            "id": "class-LogOut-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Product",
            "id": "class-Product-f3864cb73d80ccb27b42b84321099d9b",
            "file": "src/app/products/models/product.ts",
            "type": "class",
            "sourceCode": "export class Product {\r\n  id?: number;\r\n  productName: string;\r\n  description?: string;\r\n  price: number;\r\n  imgUrl?: string;\r\n  category?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "category",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "description",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imgUrl",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "price",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "productName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProductState",
            "id": "class-ProductState-c3bc56daa1e9918e49a036a67fdfe9a9",
            "file": "src/app/products/store/product.state.ts",
            "type": "class",
            "sourceCode": "import { Product } from '../models/product';\r\n\r\nexport default class ProductState {\r\n  Proucts: Array<Product>;\r\n  ProductError: Error;\r\n}\r\n\r\nexport const initializeState = (): ProductState => {\r\n  return { Proucts: Array<Product>(), ProductError: null };\r\n};\r\n",
            "properties": [
                {
                    "name": "ProductError",
                    "type": "Error",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "Proucts",
                    "type": "Array<Product>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-bdd777ef73c162ce3263533eb6ac028a",
            "file": "src/app/store/actions/auth.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Auth] Login',\r\n  LOGIN_SUCCESS = '[Auth] Login Success',\r\n  LOGIN_FAILURE = '[Auth] Login Failure',\r\n  SIGNUP = '[Auth] Signup',\r\n  SIGNUP_SUCCESS = '[Auth] Signup Success',\r\n  SIGNUP_FAILURE = '[Auth] Signup Failure',\r\n  LOGOUT = '[Auth] Logout',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class LogOut implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\n\r\nexport type All =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | LogOut;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProduct",
            "id": "class-UpdateProduct-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_PRODUCT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateProductSuccess",
            "id": "class-UpdateProductSuccess-3ae5a2a7b2fe5b6278e839192cf24594",
            "file": "src/app/products/store/actions/product.action.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Product } from '../../models/product';\r\n\r\nexport const LIST_PRODUCTS = '[Products] Fetch product';\r\nexport const ADD_PRODUCT = '[Products] Add product';\r\nexport const UPDATE_PRODUCT = '[Products] Update product';\r\nexport const DELETE_PRODUCT = '[Products] Delete product';\r\nexport const LIST_DATA_SUCCESS = '[Products] List Success';\r\nexport const ADD_PRODUCT_SUCCESS = '[Products] Add product success';\r\nexport const DELETE_PRODUCT_SUCCESS = '[Products] Delete product success';\r\nexport const UPDATE_PRODUCT_SUCCESS = '[Products] Update product success';\r\n\r\nexport class ListProducts implements Action {\r\n  readonly type = LIST_PRODUCTS;\r\n}\r\n\r\nexport class ListDataSucess implements Action {\r\n  readonly type = LIST_DATA_SUCCESS;\r\n  constructor(public payload: Product[]) {}\r\n}\r\n\r\nexport class AddProduct implements Action {\r\n  readonly type = ADD_PRODUCT;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class AddProductSuccess implements Action {\r\n  readonly type = ADD_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class UpdateProduct implements Action {\r\n  readonly type = UPDATE_PRODUCT;\r\n  constructor(public payload: { index: number; newProduct: Product }) {}\r\n}\r\n\r\nexport class UpdateProductSuccess implements Action {\r\n  readonly type = UPDATE_PRODUCT_SUCCESS;\r\n  constructor(public payload: Product) {}\r\n}\r\n\r\nexport class DeleteProduct implements Action {\r\n  readonly type = DELETE_PRODUCT;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class DeleteProductSuccess implements Action {\r\n  readonly type = DELETE_PRODUCT_SUCCESS;\r\n}\r\n\r\nexport type ProductsActions =\r\n  | ListProducts\r\n  | AddProduct\r\n  | UpdateProduct\r\n  | DeleteProduct\r\n  | AddProductSuccess\r\n  | DeleteProductSuccess\r\n  | UpdateProductSuccess\r\n  | ListDataSucess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Product"
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Product",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_PRODUCT_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "User",
            "id": "class-User-00a2ae8a51b02fb67da0df4f58b8e7ac",
            "file": "src/app/models/user.ts",
            "type": "class",
            "sourceCode": "export class User {\n  id?: string;\n  email: string;\n  password: string;\n  token?: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "token",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1e33fe1396dd4acf234ff9e764ab5dce",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkTheme",
                    "defaultValue": "new FormControl(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'electronicsProductManagement'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ThemeService } from '../app/theme/theme.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'electronicsProductManagement';\n  darkTheme = new FormControl(false);\n\n  constructor(private themeService: ThemeService) {\n    this.darkTheme.valueChanges.subscribe((value) => {\n      if (value) {\n        this.themeService.toggleDark();\n      } else {\n        this.themeService.toggleLight();\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".theming {\r\n    float: right;\r\n    padding: 5px;\r\n    margin-left: 15px;\r\n    .darkTheme {\r\n        cursor: pointer;\r\n    }\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-header></app-header>\r\n<div class=\"theming\">\r\n    <a class=\"themeBtn\"><label for=\"darkTheme\"   area-label=\"checkBox\">Dark Theme</label>\r\n        <input class=\"darkTheme\" id=\"darkTheme\" tabindex=\"0\"  type=\"checkbox\" [formControl]=\"darkTheme\"></a>\r\n</div>\r\n<router-outlet></router-outlet>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-dfd769682a7b760617c52e578d5df979",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "logOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState } from '../store/app.states';\nimport { LogOut } from '../store/actions/auth.actions';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss'],\n})\nexport class HeaderComponent implements OnInit {\n  getState: Observable<any>;\n  isAuthenticated: false;\n  user = null;\n  errorMessage = null;\n\n  constructor(private store: Store<AppState>) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getState.subscribe((state) => {\n      this.isAuthenticated = state.isAuthenticated;\n      this.user = state.user;\n      this.errorMessage = state.errorMessage;\n    });\n  }\n\n  logOut(): void {\n    this.store.dispatch(new LogOut());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "          :host {\r\n             display: block;\r\n             background-color: var(--primary-color);\r\n             color: var(--text-color);\r\n         }\r\n         \r\n         .header {\r\n             overflow: hidden;\r\n             padding: 20px;\r\n             font-weight: bold;\r\n             a {\r\n                 float: left;\r\n                 color: white;\r\n                 text-align: center;\r\n                 padding: 12px;\r\n                 text-decoration: none;\r\n                 font-size: 18px;\r\n                 line-height: 25px;\r\n                 border-radius: 4px;\r\n                 a:hover {\r\n                     background-color: #f4f0ec;\r\n                     color: black;\r\n                 }\r\n             }\r\n             .header-right {\r\n                 float: right;\r\n                 label {\r\n                     color: white;\r\n                 }\r\n                 .logoutBtn {\r\n                     cursor: pointer;\r\n                     padding-left: 3px;\r\n                 }\r\n                 .logoutBtn:hover {\r\n                     background-color: #f4f0ec;\r\n                     color: black;\r\n                 }\r\n             }\r\n             @media screen and (max-width: 500px) {\r\n                 .header a {\r\n                     float: none;\r\n                     display: block;\r\n                     text-align: left;\r\n                 }\r\n                 .header-right {\r\n                     float: none;\r\n                 }\r\n             }\r\n         }",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header\">\n\n    <div class=\"col-md-4\">\n        <a href=\"#\" class=\"logo\">Electronics Product Management System</a>\n        <div class=\"header-right\">\n            <div *ngIf=\"isAuthenticated; then doSomething; else doSomethingElse;\"></div>\n            <ng-template #doSomething>\n                <label>Logged User : <em>{{user.email}}!</em></label>\n                <div>\n                    <a class=\"logoutBtn\" (click)=\"logOut()\">Log out</a>\n                </div>\n            </ng-template>\n            <ng-template #doSomethingElse>\n                <a [routerLink]=\"['/login']\" class=\"btn btn-primary\">Login</a>\n                <a [routerLink]=\"['/signup']\" class=\"btn btn-primary\">Sign up</a>\n\n            </ng-template>\n\n        </div>\n    </div>\n\n</div>"
        },
        {
            "name": "LoginSignupComponent",
            "id": "component-LoginSignupComponent-4ad6a96609146225ed4c4a372f52bc37",
            "file": "src/app/login-signup/login-signup.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-signup",
            "styleUrls": [
                "./login-signup.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-signup.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "user",
                    "defaultValue": "new User()",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "viewLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {\n  FormGroup,\n  FormControl,\n  FormBuilder,\n  Validators,\n} from '@angular/forms';\nimport { User } from '../models/user';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectAuthState } from '../store/app.states';\nimport { LogIn, SignUp } from '../store/actions/auth.actions';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-login-signup',\n  templateUrl: './login-signup.component.html',\n  styleUrls: ['./login-signup.component.scss'],\n})\nexport class LoginSignupComponent implements OnInit {\n  loginForm: FormGroup;\n  user: User = new User();\n  getState: Observable<any>;\n  errorMessage: string | null;\n  viewLogin: boolean;\n\n  constructor(\n    private fb: FormBuilder,\n    private store: Store<AppState>,\n    private route: ActivatedRoute\n  ) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: [null, [Validators.email, Validators.required]],\n      password: [null, [Validators.required, Validators.minLength(6)]],\n    });\n\n    this.getState.subscribe((state) => {\n      this.errorMessage = state.errorMessage;\n    });\n    this.errorMessage = null;\n\n    this.route.data.subscribe((params) => {\n      if (params && params.isLogin) {\n        this.viewLogin = params.isLogin;\n      } else {\n        this.viewLogin = false;\n      }\n    });\n  }\n\n  submitForm(): void {\n    const payload = {\n      email: this.loginForm.get('email').value,\n      password: this.loginForm.get('password').value,\n    };\n\n    if (this.viewLogin) {\n      this.store.dispatch(new LogIn(payload));\n    } else {\n      this.store.dispatch(new SignUp(payload));\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../theme/form.scss'",
                    "styleUrl": "./login-signup.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n\n    <form class=\"form\" [formGroup]=\"loginForm\" (ngSubmit)=\"submitForm()\" novalidate>\n\n        <h2 class=\"formLabel\"><span *ngIf=\"viewLogin\">Login</span> <span *ngIf=\"!viewLogin\">Create your account</span></h2>\n        <label></label>\n\n        <div *ngIf=\"errorMessage\" class=\"errMsg\">\n            {{errorMessage}}\n        </div>\n\n        <label for=\"email\">E-mail: <span class=\"lblError\">*</span></label>\n        <div class=\"controls\">\n            <input type=\"text\" id=\"username\" placeholder=\"Email\" class=\"form-control\" formControlName=\"email\">\n            <p class=\"lblError\" *ngIf=\"loginForm.get('email').hasError('required') && !loginForm.get('email').pristine\">\n                Please provide your E-mail\n            </p>\n            <p class=\"lblError\" *ngIf=\"loginForm.get('email').hasError('email') && !loginForm.get('email').pristine\">\n                E-mail is Invalid</p>\n        </div>\n\n\n        <label for=\"password\">Password: <span class=\"lblError\">*</span></label>\n        <div class=\"controls\">\n            <input type=\"password\" id=\"password\" placeholder=\"Password\" class=\"form-control\" formControlName=\"password\" autocomplete=\"on\">\n            <p class=\"lblError\" *ngIf=\"loginForm.get('password').hasError('required') && !loginForm.get('password').pristine\">\n                Password is Required\n            </p>\n            <p class=\"lblError\" *ngIf=\"loginForm.get('password').hasError('minlength') && !loginForm.get('password').pristine\">\n                Password must be atleast six character long\n\n            </p>\n        </div>\n\n        <label><button class=\"cancelbtn\" [routerLink]=\"['/']\" aria-label=\"Cancel\">Cancel</button></label>\n        <button *ngIf=\"viewLogin\" class=\"submitBtn\" type=\"submit\" [disabled]='loginForm.invalid' aria-label=\"Login\"> Login\n        </button>\n        <button *ngIf=\"!viewLogin\" class=\"submitBtn\" type=\"submit\" [disabled]='loginForm.invalid' area-label=\"Sign UP\" tabindex=\"0\"> Sign Up\n        </button>\n\n    </form>\n    <div class=\"accountExist\">\n        <span *ngIf=\"viewLogin\"><h3>Don't have an account? <a [routerLink]=\"['/signup']\">Sign Up here</a></h3></span>\n        <span *ngIf=\"!viewLogin\"><h3>Already have an account? <a [routerLink]=\"['/login']\" tabindex=\"0\">Login here</a></h3></span>\n    </div>\n\n</div>"
        },
        {
            "name": "ProductCreateEditComponent",
            "id": "component-ProductCreateEditComponent-785e27be4337c1e03d717e3ee0af642f",
            "file": "src/app/products/product-create-edit/product-create-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-create-edit",
            "styleUrls": [
                "./product-create-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-create-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "fb",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "id",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isNewProduct",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "product",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "productForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "productService",
                    "type": "ProductService",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "submitForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ProductService } from '../services/product.service';\nimport { Product } from '../models/product';\nimport {\n  AddProduct,\n  ListProducts,\n  UpdateProduct,\n} from '../store/actions/product.action';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { AppState, selectProductState } from 'src/app/store/app.states';\n\n@Component({\n  selector: 'app-product-create-edit',\n  templateUrl: './product-create-edit.component.html',\n  styleUrls: ['./product-create-edit.component.scss'],\n})\nexport class ProductCreateEditComponent implements OnInit {\n  productForm: FormGroup;\n  product: Product;\n  id: number | null;\n  getState: Observable<any>;\n  errorMessage: string | null;\n  isNewProduct: boolean;\n  constructor(\n    public productService: ProductService,\n    private store: Store<AppState>,\n    public fb: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.getState = this.store.select(selectProductState);\n  }\n\n  ngOnInit(): void {\n    if (this.route.snapshot.params.productId) {\n      this.isNewProduct = false;\n      this.id = this.route.snapshot.params.productId;\n      this.productService.getById(this.id).subscribe((data) => {\n        this.productForm.setValue(data);\n      });\n    } else {\n      this.isNewProduct = true;\n    }\n\n    this.productForm = this.fb.group({\n      id: [null],\n      productName: [null, Validators.required],\n      description: [null],\n      price: [null, Validators.required],\n      category: [null],\n      imgUrl: ['https://i.postimg.cc/Bb4Qf9Lw/electronic.png'],\n    });\n  }\n\n  submitForm(): void {\n    if (this.id) {\n      const payload = {\n        index: this.id,\n        newProduct: this.productForm.value,\n      };\n      this.store.dispatch(new UpdateProduct(payload));\n      this.store.dispatch(new ListProducts());\n      this.router.navigateByUrl('/product');\n      window.alert('Product Updated Successfully!');\n    } else {\n      this.store.dispatch(new AddProduct(this.productForm.value));\n      this.store.dispatch(new ListProducts());\n      this.router.navigateByUrl('/product');\n      window.alert('Product Added Successfully!');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../theme/form.scss';",
                    "styleUrl": "./product-create-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n\n    <form class=\"form\" [formGroup]=\"productForm\" (ngSubmit)=\"submitForm()\" novalidate>\n        <label></label>\n        <span *ngIf=\"isNewProduct\">\n            <h2 class=\"formLabel\">Add New Product</h2>\n        </span>\n        <span *ngIf=\"!isNewProduct\">\n            <h2 class=\"formLabel\">Update Product</h2>\n        </span>\n        <label></label>\n        <div *ngIf=\"errorMessage\" class=\"errMsg\">\n            {{errorMessage}}\n        </div>\n        <label for=\"productName\">Product Name <span class=\"lblError\">*</span> </label>\n        <div class=\"controls\">\n            <input type=\"text\" id=\"productName\" placeholder=\"Product Name\" class=\"form-control\" formControlName=\"productName\">\n            <p class=\"lblError\" *ngIf=\"productForm.get('productName').hasError('required') && !productForm.get('productName').pristine\">\n                Please provide product name\n            </p>\n        </div>\n        <label for=\"description\"> Description </label>\n        <div class=\"controls\">\n            <textarea id=\"description\" placeholder=\" Description\" class=\"form-control\" maxlength=\"50\" formControlName=\"description\"></textarea>\n        </div>\n        <label for=\"Price\">Price <span class=\"lblError\">*</span></label>\n        <div class=\"controls\">\n            <input type=\"number\" id=\"price\" min=\"1\" placeholder=\"Price\" class=\"form-control\" formControlName=\"price\">\n            <p class=\"lblError\" *ngIf=\"productForm.get('price').hasError('required') && !productForm.get('price').pristine\">\n                Please provide Price\n            </p>\n        </div>\n        <label for=\"category\">Category</label>\n        <div class=\"controls\">\n            <input type=\"text\" id=\"category\" placeholder=\"Category\" class=\"form-control\" formControlName=\"category\">\n        </div>\n        <label for=\"Image URL\">Image Url </label>\n        <div class=\"controls\">\n            <input type=\"text\" id=\"imgUrl\" placeholder=\"Image Url\" class=\"form-control\" formControlName=\"imgUrl\">\n        </div>\n        <label><button class=\"cancelbtn\" [routerLink]=\"['/']\" aria-label=\"Cancel\">Cancel</button></label>\n        <button *ngIf=\"isNewProduct\" class=\"submitBtn\" type=\"submit\" [disabled]='productForm.invalid' aria-label=\"Add Product\"> Add\n            Product\n        </button>\n        <button *ngIf=\"!isNewProduct\" class=\"submitBtn\" type=\"submit\" [disabled]='editform.invalid' aria-label=\"Update Product\"> Update\n            Product\n        </button>\n    </form>\n</div>"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-ec11f58da64f125acb68200436eb75ec",
            "file": "src/app/products/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "productService",
                    "type": "ProductService",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Product } from '../models/product';\nimport { ProductService } from 'src/app/products/services/product.service';\nimport {\n  AppState,\n  selectProductState,\n  selectAuthState,\n} from '../../store/app.states';\nimport { Store } from '@ngrx/store';\nimport {\n  ListProducts,\n  DeleteProduct,\n} from '../../products/store/actions/product.action';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.scss'],\n})\nexport class ProductListComponent implements OnInit {\n  products: Product[] = [];\n  isAuthenticated = false;\n  getState: Observable<any>;\n  errorMessage: string | null;\n  constructor(\n    public productService: ProductService,\n    private store: Store<AppState>\n  ) {\n    this.getState = this.store.select(selectAuthState);\n  }\n\n  ngOnInit(): void {\n    this.getState.subscribe((state) => {\n      this.isAuthenticated = state.isAuthenticated;\n      this.products = state.product;\n      this.errorMessage = state.errorMessage;\n    });\n\n    this.store.dispatch(new ListProducts());\n    this.store.subscribe((data) => {\n      this.products = data.product.products;\n    });\n  }\n\n  deleteProduct(id): void {\n    if (window.confirm('Do you really want to delete the product?')) {\n      this.store.dispatch(new DeleteProduct(id));\n      this.store.dispatch(new ListProducts());\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".add-btn {\r\n    background-color: #4CAF50;\r\n    border: none;\r\n    color: white;\r\n    padding: 15px 32px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 10px 15px;\r\n    cursor: pointer;\r\n}\r\n\r\n.product-card {\r\n    margin: 5px -5px 0px 5px;\r\n}\r\n\r\n.product-card:after {\r\n    content: \"\";\r\n    display: table;\r\n    clear: both;\r\n}\r\n\r\n.product-tumb {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 200px;\r\n    padding: 5px;\r\n    background: #f0f0f0;\r\n}\r\n\r\n.product-tumb img {\r\n    max-width: 70%;\r\n    max-height: 70%;\r\n}\r\n\r\n.product-details {\r\n    padding: 20px;\r\n    background-color: white;\r\n}\r\n\r\n.product-catagory {\r\n    display: block;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    text-transform: uppercase;\r\n    color: #607d8b;\r\n    margin-bottom: 5px;\r\n    min-height: 20px;\r\n    height: auto;\r\n}\r\n\r\n.product-details h4 a {\r\n    font-weight: 500;\r\n    display: block;\r\n    margin-bottom: 18px;\r\n    text-transform: uppercase;\r\n    color: #363636;\r\n    text-decoration: none;\r\n    transition: 0.3s;\r\n    height: 20px;\r\n}\r\n\r\n.product-details h4 a:hover {\r\n    color: #fbb72c;\r\n}\r\n\r\n.product-details p {\r\n    font-size: 15px;\r\n    line-height: 22px;\r\n    margin-bottom: 18px;\r\n    color: #999;\r\n}\r\n\r\n.product-bottom-details {\r\n    overflow: hidden;\r\n    border-top: 1px solid #eee;\r\n    padding-top: 20px;\r\n}\r\n\r\n.product-bottom-details div {\r\n    float: left;\r\n    width: 50%;\r\n}\r\n\r\n.product-price {\r\n    font-size: 18px;\r\n    color: #fbb72c;\r\n    font-weight: 600;\r\n}\r\n\r\n.product-links {\r\n    text-align: right;\r\n}\r\n\r\n.product-links a {\r\n    display: inline-block;\r\n    margin-left: 5px;\r\n    color: blue;\r\n    transition: 0.3s;\r\n    font-size: 17px;\r\n}\r\n\r\n.product-links a:hover {\r\n    color: #fbb72c;\r\n}\r\n\r\n.column {\r\n    float: left;\r\n    width: 20%;\r\n    min-height: 400px;\r\n    height: auto;\r\n    margin: 10PX;\r\n    border: 1px solid #b3b3b3;\r\n}\r\n\r\n@media screen and (max-width: 600px) {\r\n    .column {\r\n        width: 100%;\r\n        display: block;\r\n        margin-bottom: 20px;\r\n    }\r\n}\r\n\r\n.card {\r\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\r\n    padding: 16px;\r\n    text-align: center;\r\n    background-color: #f1f1f1;\r\n}\r\n\r\nh1 {\r\n    display: block;\r\n    font-size: 18px;\r\n    margin-block-start: 0.67em;\r\n    margin-inline-start: 0px;\r\n    margin-inline-end: 0px;\r\n    font-weight: bold;\r\n    margin: 10px;\r\n}\r\n\r\np {\r\n    display: block;\r\n    margin-block-start: 1em;\r\n    margin-block-end: 1em;\r\n    margin-inline-start: 0px;\r\n    margin-inline-end: 0px;\r\n    min-height: 50px;\r\n    height: auto;\r\n}\r\n\r\n.delBtn {\r\n    cursor: pointer;\r\n}",
                    "styleUrl": "./product-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "productService",
                        "type": "ProductService"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"button\" class=\"add-btn\" area-label=\"Create Product\" *ngIf='isAuthenticated' [routerLink]=\"['/product/create']\" tabindex=\"0\">Create new product</button>\n<div class=\"emptyDiv\"></div>\n<div class=\"product-card\">\n\n    <div class=\"column\" *ngFor=\"let product of products\">\n\n        <div class=\"product-tumb\">\n            <img src=\"{{product.imgUrl}}\" alt=\"{{product.productName}}\">\n        </div>\n        <div class=\"product-details\">\n            <h4><a href=\"\">{{product.productName}}</a></h4>\n            <span class=\"product-catagory\">{{product.category}}</span>\n            <p>{{product.description}}</p>\n            <div class=\"product-bottom-details\">\n                <div class=\"product-price\">Price &#x20b9;{{product.price}}</div>\n                <div class=\"product-links\" *ngIf='isAuthenticated'>\n                    <a [routerLink]=\"['/product/', product.id, 'edit']\" tabindex=\"0\" area-label=\"Edit Product\">Edit</a>\n                    <a class=\"delBtn\" area-label=\"Delete Product\" (click)=\"deleteProduct(product.id)\" tabindex=\"0\" area-label=\"Delete Product\">Delete</a>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "ThemeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginSignupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ProductModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProductCreateEditComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProductRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Add product'"
            },
            {
                "name": "ADD_PRODUCT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Add product success'"
            },
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/dark-theme.ts",
                "type": "object",
                "defaultValue": "{\r\n    'background-color': '#455363',\r\n    'primary-color': '#1f2935',\r\n    'text-color': '#fff'\r\n  }"
            },
            {
                "name": "DELETE_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Delete product'"
            },
            {
                "name": "DELETE_PRODUCT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Delete product success'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseURL: 'http://localhost:3000/'\n}"
            },
            {
                "name": "environmentValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "environment.ts",
                "type": "object",
                "defaultValue": "{\r\n    BASE_URL :  'http://localhost:3000/'\r\n}"
            },
            {
                "name": "initializeState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/product.state.ts",
                "type": "",
                "defaultValue": "(): ProductState => {\r\n  return { Proucts: Array<Product>(), ProductError: null };\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/reducers/product.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  products: [],\r\n  message: null,\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null,\r\n}"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/theme/light-theme.ts",
                "type": "object",
                "defaultValue": "{\r\n    'primary-color': '#474747',\r\n    'background-color': '#eeeeee',\r\n    'text-color': '#2d2d2d'\r\n  }"
            },
            {
                "name": "LIST_DATA_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] List Success'"
            },
            {
                "name": "LIST_PRODUCTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Fetch product'"
            },
            {
                "name": "ProductAdd",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/product-create-edit.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ProductList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/product-list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "object",
                "defaultValue": "{\r\n  auth: auth.reducer,\r\n  product: product.productReducer,\r\n}"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "selectProductState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.states.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('product')"
            },
            {
                "name": "SignUp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login-signup.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/login-signup.stories.ts",
                "type": "Story<LoginSignupComponent>",
                "defaultValue": "(args: LoginSignupComponent) => ({\r\n  component: LoginSignupComponent,\r\n  template: `<app-login-signup></app-login-signup>`,\r\n  styles: ['../app/login-signup/login-signup.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LoginSignupComponent],\r\n    providers: [provideMockStore()],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/product-create-edit.stories.ts",
                "type": "Story<ProductCreateEditComponent>",
                "defaultValue": "(\r\n  args: ProductCreateEditComponent\r\n) => ({\r\n  component: ProductCreateEditComponent,\r\n  //templateUrl: '../app/products/product-create-edit/product-create-edit.component.html',\r\n  template: `<app-product-create-edit></app-product-create-edit>`,\r\n  styleUrls: [\r\n    '../app/products/product-create-edit/product-create-edit.component.scss',\r\n  ],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      HttpClientModule,\r\n      RouterModule,\r\n    ],\r\n    declarations: [ProductCreateEditComponent],\r\n    providers: [provideMockStore(), ProductService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/product-list.stories.ts",
                "type": "Story<ProductListComponent>",
                "defaultValue": "(args: ProductListComponent) => ({\r\n  component: ProductListComponent,\r\n  templateUrl: '../app/products/product-list/product-list.component.html',\r\n  styleUrls: ['../app/products/product-list/product-list.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      HttpClientModule,\r\n    ],\r\n    declarations: [ProductListComponent],\r\n    providers: [provideMockStore(), ProductService],\r\n  },\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_PRODUCT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Update product'"
            },
            {
                "name": "UPDATE_PRODUCT_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/products/store/actions/product.action.ts",
                "type": "string",
                "defaultValue": "'[Products] Update product success'"
            }
        ],
        "functions": [
            {
                "name": "productReducer",
                "file": "src/app/products/store/reducers/product.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/auth.reducers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "All",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                "file": "src/app/store/actions/auth.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "ProductsActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ListProducts | AddProduct | UpdateProduct | DeleteProduct | AddProductSuccess | DeleteProductSuccess | UpdateProductSuccess | ListDataSucess",
                "file": "src/app/products/store/actions/product.action.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Auth] Login"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Auth] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Auth] Login Failure"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Auth] Signup"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Auth] Signup Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Auth] Signup Failure"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Auth] Logout"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/auth.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/products/store/actions/product.action.ts": [
                {
                    "name": "ADD_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Add product'"
                },
                {
                    "name": "ADD_PRODUCT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Add product success'"
                },
                {
                    "name": "DELETE_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Delete product'"
                },
                {
                    "name": "DELETE_PRODUCT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Delete product success'"
                },
                {
                    "name": "LIST_DATA_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] List Success'"
                },
                {
                    "name": "LIST_PRODUCTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Fetch product'"
                },
                {
                    "name": "UPDATE_PRODUCT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Update product'"
                },
                {
                    "name": "UPDATE_PRODUCT_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "type": "string",
                    "defaultValue": "'[Products] Update product success'"
                }
            ],
            "src/app/theme/dark-theme.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/dark-theme.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'background-color': '#455363',\r\n    'primary-color': '#1f2935',\r\n    'text-color': '#fff'\r\n  }"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseURL: 'http://localhost:3000/'\n}"
                }
            ],
            "environment.ts": [
                {
                    "name": "environmentValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    BASE_URL :  'http://localhost:3000/'\r\n}"
                }
            ],
            "src/app/products/store/product.state.ts": [
                {
                    "name": "initializeState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/product.state.ts",
                    "type": "",
                    "defaultValue": "(): ProductState => {\r\n  return { Proucts: Array<Product>(), ProductError: null };\r\n}"
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n}"
                }
            ],
            "src/app/products/store/reducers/product.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/products/store/reducers/product.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  products: [],\r\n  message: null,\r\n  added: null,\r\n  updated: null,\r\n  loaded: null,\r\n  deleted: null,\r\n}"
                }
            ],
            "src/app/theme/light-theme.ts": [
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/theme/light-theme.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    'primary-color': '#474747',\r\n    'background-color': '#eeeeee',\r\n    'text-color': '#2d2d2d'\r\n  }"
                }
            ],
            "src/stories/product-create-edit.stories.ts": [
                {
                    "name": "ProductAdd",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/product-create-edit.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/product-create-edit.stories.ts",
                    "type": "Story<ProductCreateEditComponent>",
                    "defaultValue": "(\r\n  args: ProductCreateEditComponent\r\n) => ({\r\n  component: ProductCreateEditComponent,\r\n  //templateUrl: '../app/products/product-create-edit/product-create-edit.component.html',\r\n  template: `<app-product-create-edit></app-product-create-edit>`,\r\n  styleUrls: [\r\n    '../app/products/product-create-edit/product-create-edit.component.scss',\r\n  ],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      HttpClientModule,\r\n      RouterModule,\r\n    ],\r\n    declarations: [ProductCreateEditComponent],\r\n    providers: [provideMockStore(), ProductService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/product-list.stories.ts": [
                {
                    "name": "ProductList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/product-list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/product-list.stories.ts",
                    "type": "Story<ProductListComponent>",
                    "defaultValue": "(args: ProductListComponent) => ({\r\n  component: ProductListComponent,\r\n  templateUrl: '../app/products/product-list/product-list.component.html',\r\n  styleUrls: ['../app/products/product-list/product-list.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n      HttpClientModule,\r\n    ],\r\n    declarations: [ProductListComponent],\r\n    providers: [provideMockStore(), ProductService],\r\n  },\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/app.states.ts": [
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  auth: auth.reducer,\r\n  product: product.productReducer,\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                },
                {
                    "name": "selectProductState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.states.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('product')"
                }
            ],
            "src/stories/login-signup.stories.ts": [
                {
                    "name": "SignUp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login-signup.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/login-signup.stories.ts",
                    "type": "Story<LoginSignupComponent>",
                    "defaultValue": "(args: LoginSignupComponent) => ({\r\n  component: LoginSignupComponent,\r\n  template: `<app-login-signup></app-login-signup>`,\r\n  styles: ['../app/login-signup/login-signup.component.scss'],\r\n  moduleMetadata: {\r\n    imports: [\r\n      RouterTestingModule.withRoutes([]),\r\n      FormsModule,\r\n      ReactiveFormsModule,\r\n    ],\r\n    declarations: [LoginSignupComponent],\r\n    providers: [provideMockStore()],\r\n  },\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/products/store/reducers/product.reducer.ts": [
                {
                    "name": "productReducer",
                    "file": "src/app/products/store/reducers/product.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/auth.reducers.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/auth.reducers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Auth] Login"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Auth] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Auth] Login Failure"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Auth] Signup"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Auth] Signup Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Auth] Signup Failure"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Auth] Logout"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/auth.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "All",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | LogOut",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/products/store/actions/product.action.ts": [
                {
                    "name": "ProductsActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ListProducts | AddProduct | UpdateProduct | DeleteProduct | AddProductSuccess | DeleteProductSuccess | UpdateProductSuccess | ListDataSucess",
                    "file": "src/app/products/store/actions/product.action.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/product",
                        "pathMatch": "full"
                    },
                    {
                        "path": "product",
                        "component": "ProductListComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginSignupComponent",
                        "data": {
                            "isLogin": true
                        }
                    },
                    {
                        "path": "signup",
                        "component": "LoginSignupComponent"
                    },
                    {
                        "path": "product/create",
                        "component": "ProductCreateEditComponent"
                    },
                    {
                        "path": "product/:productId/edit",
                        "component": "ProductCreateEditComponent"
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/products/product-routing.module.ts",
                "module": "ProductRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/product",
                        "pathMatch": "full"
                    },
                    {
                        "path": "product",
                        "component": "ProductListComponent"
                    },
                    {
                        "path": "product/create",
                        "component": "ProductCreateEditComponent"
                    },
                    {
                        "path": "product/:productId/edit",
                        "component": "ProductCreateEditComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environmentValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/login-signup/login-signup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginSignupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/models/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/products/models/product.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/products/product-create-edit/product-create-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductCreateEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/products/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/products/services/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListDataSucess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ListProducts",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_PRODUCT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_PRODUCT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_DATA_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LIST_PRODUCTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_PRODUCT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/actions/product.action.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_PRODUCT_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/effects/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/product.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProductState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/product.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initializeState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/product.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/product.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "productReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/products/store/reducers/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogOut",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.states.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/dark-theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/light-theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/theme/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login-signup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/login-signup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/product-create-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductAdd",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/product-create-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/product-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ProductList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/product-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}